#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.1
#  in conjunction with Tcl version 8.6
#    Jan 22, 2022 06:23:03 PM +07  platform: Windows NT

from cgitb import text
from hashlib import new
from pkgutil import extend_path
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os
import subprocess

import main_menu_support

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("246x269+421+376")
        top.minsize(120, 1)
        top.maxsize(3204, 1061)
        top.resizable(1,  1)
        top.title("SMART CCTV")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

# top title: MAIN MENU
        self.topTitleLabel = tk.Label(self.top)
        self.topTitleLabel.place(relx=0.285, rely=0.059, height=13, width=112)
        self.topTitleLabel.configure(activebackground="#f9f9f9")
        self.topTitleLabel.configure(activeforeground="black")
        self.topTitleLabel.configure(anchor='w')
        self.topTitleLabel.configure(background="#d9d9d9")
        # self.topTitleLabel.configure(command=)
        self.topTitleLabel.configure(compound='left')
        self.topTitleLabel.configure(disabledforeground="#a3a3a3")
        self.topTitleLabel.configure(font="-family {Verdana} -size 11 -weight bold")
        self.topTitleLabel.configure(foreground="#000000")
        self.topTitleLabel.configure(highlightbackground="#d9d9d9")
        self.topTitleLabel.configure(highlightcolor="black")
        self.topTitleLabel.configure(text='''MAIN MENU''')

# add new face to be detected and known by cctv button
        self.getFace = tk.Button(self.top)
        self.getFace.place(relx=0.081, rely=0.372, height=34, width=87)
        # self.getFace.place(relx=0.325, rely=0.372, height=34, width=87)
        self.getFace.configure(activebackground="#ececec")
        self.getFace.configure(activeforeground="#000000")
        self.getFace.configure(background="#d9d9d9")
        self.getFace.configure(command=lambda: os.system('python get_face_data.py'))
        self.getFace.configure(compound='left')
        self.getFace.configure(disabledforeground="#a3a3a3")
        self.getFace.configure(font="-family {Segoe UI} -size 9")
        self.getFace.configure(foreground="#000000")
        self.getFace.configure(highlightbackground="#d9d9d9")
        self.getFace.configure(highlightcolor="black")
        self.getFace.configure(pady="0")
        self.getFace.configure(text='''Add Face''')

# turn alarm (email notification) on or off
        # self.onoffNotify = tk.Button(self.top)
        # self.onoffNotify.place(relx=0.569, rely=0.372, height=34, width=87)
        # self.onoffNotify.configure(activebackground="#ececec")
        # self.onoffNotify.configure(activeforeground="#000000")
        # self.onoffNotify.configure(background="#d9d9d9")
        # # self.onoffNotify.configure(command=)
        # self.onoffNotify.configure(compound='left')
        # self.onoffNotify.configure(disabledforeground="#a3a3a3")
        # self.onoffNotify.configure(font="-family {Segoe UI} -size 9")
        # self.onoffNotify.configure(foreground="#000000")
        # self.onoffNotify.configure(highlightbackground="#d9d9d9")
        # self.onoffNotify.configure(highlightcolor="black")
        # self.onoffNotify.configure(pady="0")
        # self.onoffNotify.configure(text='''On/Off Notify''')

# turn cctv on or off button
        # self.onoffCCTV = tk.Button(self.top, relief='raised')
        # self.onoffCCTV.place(relx=0.569, rely=0.186, height=34, width=87)
        # self.onoffCCTV.configure(activebackground="#ececec")
        # self.onoffCCTV.configure(activeforeground="#000000")
        # self.onoffCCTV.configure(background="#d9d9d9")
        # self.onoffCCTV.configure(compound='left')
        # self.onoffCCTV.configure(disabledforeground="#a3a3a3")
        # self.onoffCCTV.configure(font="-family {Segoe UI} -size 9")
        # self.onoffCCTV.configure(foreground="#000000")
        # self.onoffCCTV.configure(highlightbackground="#d9d9d9")
        # self.onoffCCTV.configure(highlightcolor="black")
        # self.onoffCCTV.configure(pady="0")
        # self.onoffCCTV.configure(text='''CCTV Off''')

        # import subprocess as sp
        # def killCCTVProc(pid):
        #         sp.Popen('taskkill /F /PID {0}'.format(pid), shell=True)

        # def toggleCCTV():
        #         # cctv off
        #         if self.onoffCCTV.configure('relief')[-1] == 'sunken':
        #                 self.onoffCCTV.configure(text='''CCTV Off''')
        #                 self.onoffCCTV.configure(relief='raised')
        #                 exit()
                        
        #         # cctv on
        #         else:
        #                 os.system('python face_recog_bg.py --cascade haarcascade_frontalface_default.xml --encodings model.pickle')
        #                 self.onoffCCTV.configure(text='''CCTV On''')
        #                 self.onoffCCTV.configure(relief='sunken')
        
        # self.onoffCCTV.configure(command=toggleCCTV)

# view live cctv feed button
        self.liveFeed = tk.Button(self.top)
        self.liveFeed.place(relx=0.081, rely=0.186, height=34, width=87)
        # self.liveFeed.place(relx=0.325, rely=0.186, height=34, width=87)
        self.liveFeed.configure(activebackground="#ececec")
        self.liveFeed.configure(activeforeground="#000000")
        self.liveFeed.configure(background="#d9d9d9")
        self.liveFeed.configure(command=lambda: os.system("python face_recog_main.py --cascade haarcascade_frontalface_default.xml --encodings model.pickle"))
        self.liveFeed.configure(compound='left')
        self.liveFeed.configure(disabledforeground="#a3a3a3")
        self.liveFeed.configure(font="-family {Segoe UI} -size 9")
        self.liveFeed.configure(foreground="#000000")
        self.liveFeed.configure(highlightbackground="#d9d9d9")
        self.liveFeed.configure(highlightcolor="black")
        self.liveFeed.configure(pady="0")
        self.liveFeed.configure(text='''Live Feed''')

# add new email for notifications button
        self.getEmail = tk.Button(self.top)
        self.getEmail.place(relx=0.081, rely=0.558, height=34, width=87)
        # self.getEmail.place(relx=0.325, rely=0.558, height=34, width=87)
        self.getEmail.configure(activebackground="#ececec")
        self.getEmail.configure(activeforeground="#000000")
        self.getEmail.configure(background="#d9d9d9")
        self.getEmail.configure(command=lambda: os.system('python new_mail.py'))
        self.getEmail.configure(compound='left')
        self.getEmail.configure(disabledforeground="#a3a3a3")
        self.getEmail.configure(font="-family {Segoe UI} -size 9")
        self.getEmail.configure(foreground="#000000")
        self.getEmail.configure(highlightbackground="#d9d9d9")
        self.getEmail.configure(highlightcolor="black")
        self.getEmail.configure(pady="0")
        self.getEmail.configure(text='''Add Email''')

# view cctv recordings button
        # self.recordingsCCTV = tk.Button(self.top)
        # self.recordingsCCTV.place(relx=0.569, rely=0.186, height=34, width=87)
        # self.recordingsCCTV.configure(activebackground="#ececec")
        # self.recordingsCCTV.configure(activeforeground="#000000")
        # self.recordingsCCTV.configure(background="#d9d9d9")
        # # self.recordingsCCTV.configure(command=)
        # self.recordingsCCTV.configure(compound='left')
        # self.recordingsCCTV.configure(disabledforeground="#a3a3a3")
        # self.recordingsCCTV.configure(font="-family {Segoe UI} -size 9")
        # self.recordingsCCTV.configure(foreground="#000000")
        # self.recordingsCCTV.configure(highlightbackground="#d9d9d9")
        # self.recordingsCCTV.configure(highlightcolor="black")
        # self.recordingsCCTV.configure(pady="0")
        # self.recordingsCCTV.configure(text='''Recordings''')

# send email button
        self.recordingsCCTV = tk.Button(self.top)
        self.recordingsCCTV.place(relx=0.569, rely=0.186, height=34, width=87)
        self.recordingsCCTV.configure(activebackground="#ececec")
        self.recordingsCCTV.configure(activeforeground="#000000")
        self.recordingsCCTV.configure(background="#d9d9d9")
        self.recordingsCCTV.configure(command= lambda: os.system('python -c "from email_notify import send_email; send_email()"'))
        self.recordingsCCTV.configure(compound='left')
        self.recordingsCCTV.configure(disabledforeground="#a3a3a3")
        self.recordingsCCTV.configure(font="-family {Segoe UI} -size 9")
        self.recordingsCCTV.configure(foreground="#000000")
        self.recordingsCCTV.configure(highlightbackground="#d9d9d9")
        self.recordingsCCTV.configure(highlightcolor="black")
        self.recordingsCCTV.configure(pady="0")
        self.recordingsCCTV.configure(text='''Send Email''')

# exit button (close program)
        self.exitProgram = tk.Button(self.top)
        # self.exitProgram.place(relx=0.325, rely=0.781, height=34, width=87)
        self.exitProgram.place(relx=0.569, rely=0.372, height=34, width=87)
        self.exitProgram.configure(activebackground="#ececec")
        self.exitProgram.configure(activeforeground="#000000")
        self.exitProgram.configure(background="#d9d9d9")
        self.exitProgram.configure(command=lambda:exit())
        self.exitProgram.configure(compound='left')
        self.exitProgram.configure(disabledforeground="#a3a3a3")
        self.exitProgram.configure(font="-family {Segoe UI} -size 9")
        self.exitProgram.configure(foreground="#000000")
        self.exitProgram.configure(highlightbackground="#d9d9d9")
        self.exitProgram.configure(highlightcolor="black")
        self.exitProgram.configure(pady="0")
        self.exitProgram.configure(text='''Exit''')

def start_up():
    main_menu_support.main()

if __name__ == '__main__':
    os.chdir('scripts/')
    main_menu_support.main()